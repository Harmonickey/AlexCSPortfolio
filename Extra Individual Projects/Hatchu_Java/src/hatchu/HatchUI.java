/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package hatchu;

import java.io.*;
import java.util.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.nio.file.Files;
import java.nio.*;
import java.nio.file.*;
import java.awt.image.BufferedImage;

/**
 *
 * @author Alex
 */
public class HatchUI extends javax.swing.JFrame {
    
    static HatchUI hatchui;
    
    public static boolean shouldReset = false;
    
    java.util.List<TextField> textBoxArray;
    java.util.List<java.awt.List> listBoxArray;
    java.util.List<Choice> comboBoxArray;
    java.util.List<Choice> danceTypeBoxArray;
    java.util.List<java.util.List<String>> castListArray;

    java.util.List<java.util.List<Integer>> showOrderPosition;
    java.util.List<Integer> showOrder;

    java.util.List<java.util.List<Integer>> solutionList;    //our final solution list of possible show orders

    public int numberOfPieces, listThreshold, intermission;

    boolean beingLoaded = false;

    public String loadedFileName;
    
    public HashMap<String, Integer> amountOfTypes = new HashMap<>();
    
    java.util.List<String> danceTypes = new ArrayList<>();
    
    int miniCount = 0;
    int levelCount = 0;
    
    int pieceNameWidth = 0;
    int pieceNameHeight = 0;
    
    int pieceDisplayHeight = 0;
    
    /**
     * Creates new form HatchUI
     */
    public HatchUI() {
        initComponents();
       
        listBoxArray = new ArrayList<>();
        comboBoxArray = new ArrayList<>();
        danceTypeBoxArray = new ArrayList<>();
        textBoxArray = new ArrayList<>();
        showOrder = new ArrayList<>();
        showOrderPosition = new ArrayList<>();
        castListArray = new ArrayList<>();
        solutionList = new ArrayList<>();
        
        solutionPanel.setVisible(false);
        solutionContainer.setVisible(false);
        
        this.setBounds(this.getX(), this.getY(), this.getWidth(), 450);
        
        FillInDanceTypes();
        
        for (String item : danceTypes)
        {
            amountOfTypes.put(item, 0);
        }
        
        SwitchVisibility("startup");
        
        JPopupMenu.setDefaultLightWeightPopupEnabled(true);
        
        File session = new File("sessions.txt");
        if (!session.exists())
        {
            loadSessionBtn.setEnabled(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        castListTitlelbl = new javax.swing.JLabel();
        castListDirLbl = new javax.swing.JLabel();
        numPiecesLbl = new javax.swing.JLabel();
        createBtn = new javax.swing.JButton();
        numPiecesTxt = new javax.swing.JTextField();
        firstHalfLbl = new javax.swing.JLabel();
        firstHalfTxt = new javax.swing.JTextField();
        maxTypeLbl = new javax.swing.JLabel();
        limitTxt = new javax.swing.JTextField();
        thresholdTxt = new javax.swing.JTextField();
        maxSolutionsLbl = new javax.swing.JLabel();
        orderingBtn = new javax.swing.JButton();
        resetBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        panelContainer = new javax.swing.JPanel();
        pieceNameLbl = new javax.swing.JLabel();
        danceTypeLbl = new javax.swing.JLabel();
        castMembersLbl = new javax.swing.JLabel();
        castListLbl = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        castListTxt = new javax.swing.JTextArea();
        solutionPanel = new javax.swing.JScrollPane();
        solutionContainer = new javax.swing.JPanel();
        progressBar = new javax.swing.JProgressBar();
        menuStrip1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        saveSessionBtn = new javax.swing.JMenuItem();
        loadSessionBtn = new javax.swing.JMenuItem();
        addDanceTypeBtn = new javax.swing.JMenuItem();
        loadCastBtn = new javax.swing.JMenuItem();
        restartBtn = new javax.swing.JMenuItem();
        quitBtn = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        aboutBtn = new javax.swing.JMenuItem();
        howToUseBtn = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Hatchu Show Ordering Solution");
        setName("HatchuFrame"); // NOI18N
        setPreferredSize(new java.awt.Dimension(1039, 450));
        setResizable(false);

        castListTitlelbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        castListTitlelbl.setLabelFor(castListDirLbl);
        castListTitlelbl.setText("Cast List");
        castListTitlelbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        castListTitlelbl.setName("castListTitleLbl"); // NOI18N
        castListTitlelbl.setPreferredSize(new java.awt.Dimension(128, 13));

        castListDirLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        castListDirLbl.setLabelFor(castListTxt);
        castListDirLbl.setText("<html><p style=\"text-align: center;\">Separate each cast member by a new line.</p></html>");
        castListDirLbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        castListDirLbl.setName("castListDirLbl"); // NOI18N
        castListDirLbl.setPreferredSize(new java.awt.Dimension(128, 29));

        numPiecesLbl.setText("How many pieces in the show?");
        numPiecesLbl.setName("numPiecesLbl"); // NOI18N

        createBtn.setText("Create");
        createBtn.setName("createBtn"); // NOI18N
        createBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                createBtnMouseClicked(evt);
            }
        });

        numPiecesTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        numPiecesTxt.setText("16");
        numPiecesTxt.setName("numPiecesTxt"); // NOI18N

        firstHalfLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        firstHalfLbl.setText("How many in first half?");
        firstHalfLbl.setName("firstHalfLbl"); // NOI18N

        firstHalfTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        firstHalfTxt.setName("firstHalfTxt"); // NOI18N

        maxTypeLbl.setText("Max amount of any dance type per half?");
        maxTypeLbl.setName("maxTypeLbl"); // NOI18N

        limitTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        limitTxt.setName("limitTxt"); // NOI18N

        thresholdTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        thresholdTxt.setText("10");
        thresholdTxt.setName("thresholdTxt"); // NOI18N

        maxSolutionsLbl.setText("Max solutions to display?");

        orderingBtn.setText("Find Ordering");
        orderingBtn.setName("orderingBtn"); // NOI18N
        orderingBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderingBtnActionPerformed(evt);
            }
        });

        resetBtn.setText("Reset");
        resetBtn.setName("resetBtn"); // NOI18N
        resetBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resetBtnMouseClicked(evt);
            }
        });

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setAutoscrolls(true);
        jScrollPane1.setPreferredSize(new java.awt.Dimension(870, 300));

        panelContainer.setPreferredSize(new java.awt.Dimension(850, 900));

        pieceNameLbl.setText("Piece Name");

        danceTypeLbl.setText("Dance Type");

        castMembersLbl.setText("Cast Members");

        castListLbl.setText("Cast List");

        javax.swing.GroupLayout panelContainerLayout = new javax.swing.GroupLayout(panelContainer);
        panelContainer.setLayout(panelContainerLayout);
        panelContainerLayout.setHorizontalGroup(
            panelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pieceNameLbl)
                    .addComponent(danceTypeLbl)
                    .addComponent(castMembersLbl)
                    .addComponent(castListLbl))
                .addContainerGap(776, Short.MAX_VALUE))
        );
        panelContainerLayout.setVerticalGroup(
            panelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pieceNameLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(danceTypeLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(castMembersLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(castListLbl)
                .addContainerGap(815, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(panelContainer);

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        castListTxt.setColumns(20);
        castListTxt.setRows(5);
        castListTxt.setName("castListTxt"); // NOI18N
        jScrollPane2.setViewportView(castListTxt);

        javax.swing.GroupLayout solutionContainerLayout = new javax.swing.GroupLayout(solutionContainer);
        solutionContainer.setLayout(solutionContainerLayout);
        solutionContainerLayout.setHorizontalGroup(
            solutionContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 193, Short.MAX_VALUE)
        );
        solutionContainerLayout.setVerticalGroup(
            solutionContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 177, Short.MAX_VALUE)
        );

        solutionPanel.setViewportView(solutionContainer);

        menuStrip1.setName("menuStrip1"); // NOI18N

        fileMenu.setText("File");
        fileMenu.setName("fileMenu"); // NOI18N

        saveSessionBtn.setText("Save Session");
        saveSessionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveSessionBtnActionPerformed(evt);
            }
        });
        fileMenu.add(saveSessionBtn);

        loadSessionBtn.setText("Load Session");
        loadSessionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadSessionBtnActionPerformed(evt);
            }
        });
        fileMenu.add(loadSessionBtn);

        addDanceTypeBtn.setText("Add Dance Type");
        addDanceTypeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDanceTypeBtnActionPerformed(evt);
            }
        });
        fileMenu.add(addDanceTypeBtn);

        loadCastBtn.setText("Load Cast");
        loadCastBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadCastBtnActionPerformed(evt);
            }
        });
        fileMenu.add(loadCastBtn);

        restartBtn.setText("Restart");
        restartBtn.setName("restartBtn"); // NOI18N
        restartBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restartBtnActionPerformed(evt);
            }
        });
        fileMenu.add(restartBtn);

        quitBtn.setText("Quit");
        quitBtn.setName("quitBtn"); // NOI18N
        quitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitBtnActionPerformed(evt);
            }
        });
        fileMenu.add(quitBtn);

        menuStrip1.add(fileMenu);

        editMenu.setText("Edit");
        editMenu.setName("editMenu"); // NOI18N

        aboutBtn.setText("About...");
        aboutBtn.setName("aboutBtn"); // NOI18N
        aboutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutBtnActionPerformed(evt);
            }
        });
        editMenu.add(aboutBtn);

        howToUseBtn.setText("How To Use");
        howToUseBtn.setName("howToUseBtn"); // NOI18N
        howToUseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                howToUseBtnActionPerformed(evt);
            }
        });
        editMenu.add(howToUseBtn);

        menuStrip1.add(editMenu);

        setJMenuBar(menuStrip1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(solutionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(castListTitlelbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(castListDirLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addComponent(createBtn))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(numPiecesLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(numPiecesTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(firstHalfLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(firstHalfTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(maxTypeLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(limitTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(maxSolutionsLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(thresholdTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(orderingBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(resetBtn))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 873, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(castListTitlelbl, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(numPiecesLbl)
                            .addComponent(numPiecesTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(2, 2, 2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(castListDirLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(createBtn)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(firstHalfLbl)
                            .addComponent(firstHalfTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(2, 2, 2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(maxTypeLbl)
                            .addComponent(limitTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(thresholdTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(maxSolutionsLbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(orderingBtn)
                            .addComponent(resetBtn))))
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(solutionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void createBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_createBtnMouseClicked
                
        for (int i = 0; i < Integer.parseInt(numPiecesTxt.getText()); i++)
        {
            AddNewPiece();

            java.util.List<String> aCastList = new ArrayList<>();
            castListArray.add(aCastList);
            
            java.util.List<Integer> list = new ArrayList<>();
            showOrderPosition.add(list);

        }

        PopulateComboBoxes();

        numberOfPieces = castListArray.size();

        firstHalfTxt.setText(Integer.toString(numberOfPieces / 2));
        limitTxt.setText(Integer.toString(numberOfPieces / 4));
        
        pieceDisplayHeight = GetPieceDisplayHeight();
        
        panelContainer.setPreferredSize(new Dimension(850, pieceDisplayHeight));

        SwitchVisibility("created");
    }//GEN-LAST:event_createBtnMouseClicked

    private void resetBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resetBtnMouseClicked
        SwitchVisibility("restart");
    }//GEN-LAST:event_resetBtnMouseClicked

    private void loadCastBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadCastBtnActionPerformed
        JFileChooser fc = new JFileChooser();
        
        //Handle open button action.
        int returnVal = fc.showOpenDialog(HatchUI.this);
        
        java.util.List<String> castListInputArray = new ArrayList<>();
        String castListInput = "";
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fc.getSelectedFile();
            Path file = selectedFile.toPath();
            try (InputStream in = Files.newInputStream(file);
                BufferedReader reader =
                  new BufferedReader(new InputStreamReader(in))) {
                      @SuppressWarnings("UnusedAssignment")
                String line = null;
                for (int i = 0; (line = reader.readLine()) != null; i++) {
                    castListInputArray.add(line);
                }
                if (castListInputArray.get(castListInputArray.size() - 1).equals(""))
                {
                    castListInputArray.remove(castListInputArray.size() - 1);
                }
            } catch (IOException x) {
                System.err.println(x);
            }
        }
        
        for (int i = 0; i < castListInputArray.size() - 2; i++)
        { 
            castListInput += castListInputArray.get(i) + "\n";   
        }
        castListInput += castListInputArray.get(castListInputArray.size() - 1);
        
        castListTxt.setText(castListInput);
        
        PopulateComboBoxes();
    }//GEN-LAST:event_loadCastBtnActionPerformed

    private void saveSessionBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveSessionBtnActionPerformed
        final SaveFileName saveForm = new SaveFileName();
        saveForm.setVisible(true);
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        
        int w = saveForm.getWidth();
        int h = saveForm.getHeight();
        int x = (dim.width - w) / 2;
        int y = (dim.height - h) / 2;
        
        saveForm.setLocation(x, y);
        
        
        saveForm.addWindowListener(new WindowListener() {
        
            @Override
            public void windowDeactivated(WindowEvent evt) { }
         
            @Override
            public void windowActivated(WindowEvent evt) { }
            
            @Override
            public void windowDeiconified(WindowEvent evt) { }
            
            @Override
            public void windowIconified(WindowEvent evt) { }
            
            @Override
            public void windowClosed(WindowEvent evt) {
                saveFormClosing(saveForm.saveFileName);
            }
            
            @Override
            public void windowClosing(WindowEvent evt) { }
            
            @Override
            public void windowOpened(WindowEvent evt) { }
           
        });
    }//GEN-LAST:event_saveSessionBtnActionPerformed

    private void loadSessionBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadSessionBtnActionPerformed
        final LoadFileName loadForm = new LoadFileName();
        loadForm.setVisible(true);
        
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        
        int w = loadForm.getWidth();
        int h = loadForm.getHeight();
        int x = (dim.width - w) / 2;
        int y = (dim.height - h) / 2;
        
        loadForm.setLocation(x, y);
        
        loadForm.addWindowListener(new WindowListener() {
        
            @Override
            public void windowDeactivated(WindowEvent evt) { }
         
            @Override
            public void windowActivated(WindowEvent evt) { }
            
            @Override
            public void windowDeiconified(WindowEvent evt) { }
            
            @Override
            public void windowIconified(WindowEvent evt) { }
            
            @Override
            public void windowClosed(WindowEvent evt) { 
                loadFormClosing(loadForm.loadFileName);
            }
            
            @Override
            public void windowClosing(WindowEvent evt) { }
            
            @Override
            public void windowOpened(WindowEvent evt) { }
           
        });
       
    }//GEN-LAST:event_loadSessionBtnActionPerformed

    private void quitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitBtnActionPerformed
        System.exit(0);
    }//GEN-LAST:event_quitBtnActionPerformed

    private void addDanceTypeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDanceTypeBtnActionPerformed
        final AddDanceType addDanceForm = new AddDanceType(danceTypes);
        addDanceForm.setVisible(true);
        
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        
        int w = addDanceForm.getWidth();
        int h = addDanceForm.getHeight();
        int x = (dim.width - w) / 2;
        int y = (dim.height - h) / 2;
        
        addDanceForm.setLocation(x, y);
        
        addDanceForm.addWindowListener(new WindowListener() {
        
            @Override
            public void windowDeactivated(WindowEvent evt) { }
         
            @Override
            public void windowActivated(WindowEvent evt) { }
            
            @Override
            public void windowDeiconified(WindowEvent evt) { }
            
            @Override
            public void windowIconified(WindowEvent evt) { }
            
            @Override
            public void windowClosed(WindowEvent evt) { 
                addDanceTypeClosing(addDanceForm.danceTypes);
            }
            
            @Override
            public void windowClosing(WindowEvent evt) { }
            
            @Override
            public void windowOpened(WindowEvent evt) { }
           
        });
    }//GEN-LAST:event_addDanceTypeBtnActionPerformed

    private void aboutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutBtnActionPerformed
        final AboutForm aboutForm = new AboutForm();
        aboutForm.setVisible(true);
        
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        
        int w = aboutForm.getWidth();
        int h = aboutForm.getHeight();
        int x = (dim.width - w) / 2;
        int y = (dim.height - h) / 2;
        
        aboutForm.setLocation(x, y);
        
        aboutForm.addWindowListener(new WindowListener() {
        
            @Override
            public void windowDeactivated(WindowEvent evt) { }
         
            @Override
            public void windowActivated(WindowEvent evt) { }
            
            @Override
            public void windowDeiconified(WindowEvent evt) { }
            
            @Override
            public void windowIconified(WindowEvent evt) { }
            
            @Override
            public void windowClosed(WindowEvent evt) { }
            
            @Override
            public void windowClosing(WindowEvent evt) { }
            
            @Override
            public void windowOpened(WindowEvent evt) { }
           
        });
    }//GEN-LAST:event_aboutBtnActionPerformed

    private void howToUseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_howToUseBtnActionPerformed
        final HowToUseForm howToUseForm = new HowToUseForm();
        howToUseForm.setVisible(true);
        
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        
        int w = howToUseForm.getWidth();
        int h = howToUseForm.getHeight();
        int x = (dim.width - w) / 2;
        int y = (dim.height - h) / 2;
        
        howToUseForm.setLocation(x, y);
        
        howToUseForm.addWindowListener(new WindowListener() {
        
            @Override
            public void windowDeactivated(WindowEvent evt) { }
         
            @Override
            public void windowActivated(WindowEvent evt) { }
            
            @Override
            public void windowDeiconified(WindowEvent evt) { }
            
            @Override
            public void windowIconified(WindowEvent evt) { }
            
            @Override
            public void windowClosed(WindowEvent evt) { }
            
            @Override
            public void windowClosing(WindowEvent evt) { }
            
            @Override
            public void windowOpened(WindowEvent evt) { }
           
        });
    }//GEN-LAST:event_howToUseBtnActionPerformed

    private void restartBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restartBtnActionPerformed
        shouldReset = true;
        this.dispose();
    }//GEN-LAST:event_restartBtnActionPerformed

    private void orderingBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderingBtnActionPerformed
        listThreshold = Integer.parseInt(thresholdTxt.getText());

        intermission = Integer.parseInt(firstHalfTxt.getText()) + 1;

        if (limitTxt.getText().equals(""))
        {
            limitTxt.setText(Integer.toString(intermission / 2));
        }

        OrderPieces();
    }//GEN-LAST:event_orderingBtnActionPerformed

    public void addDanceTypeClosing(java.util.List<String> types)
    {
        for (Choice danceArray : danceTypeBoxArray)
        {
            danceArray.removeAll();
            for (String item : types)
            {
                danceArray.add(item);
            }
        }
    }
    
    public void loadFormClosing(String loadFileName)
    {
        beingLoaded = true;

        SwitchVisibility("loaded");
        
        int index = -1;

        castListTxt.setText("");

        //read in the cast lists
        File loadFile = new File(loadFileName + "/" + loadFileName + ".txt");
        Path file = loadFile.toPath();
        try (InputStream in = Files.newInputStream(file);
            BufferedReader reader =
              new BufferedReader(new InputStreamReader(in))) {
                  @SuppressWarnings("UnusedAssignment")
            String line = null;
            for (int i = 0; (line = reader.readLine()) != null; i++) {
                if (line.startsWith("#"))
                {
                    index++;
                    java.util.List<String> aCastList = new ArrayList<>();
                    castListArray.add(aCastList);
                    java.util.List<Integer> list = new ArrayList<>();
                    showOrderPosition.add(list);
                    AddNewPiece();
                    numberOfPieces++;
                }
                else
                {
                    
                    listBoxArray.get(index).add(line);
                }
            }
        } catch (IOException x) {
            System.err.println(x);
        }

        loadFile = new File(loadFileName + "/" + loadFileName + "Titles.txt");
        
        file = loadFile.toPath();
        try (InputStream in = Files.newInputStream(file);
            BufferedReader reader =
              new BufferedReader(new InputStreamReader(in))) {
                  @SuppressWarnings("UnusedAssignment")
            String line = null;
            for (int i = 0; (line = reader.readLine()) != null; i++) {
                textBoxArray.get(i).setText(line);
            }
        } catch (IOException x) {
            System.err.println(x);
        }
        
        loadFile = new File(loadFileName + "/" + loadFileName + "DanceTypes.txt");
        
        file = loadFile.toPath();
        try (InputStream in = Files.newInputStream(file);
            BufferedReader reader =
              new BufferedReader(new InputStreamReader(in))) {
                  @SuppressWarnings("UnusedAssignment")
            String line = null;
            for (int i = 0; (line = reader.readLine()) != null; i++) {
                danceTypeBoxArray.get(i).select(line);
            }
        } catch (IOException x) {
            System.err.println(x);
        }
        
        loadFile = new File(loadFileName + "/" + loadFileName + "DanceTypesExtras.txt");
        
        file = loadFile.toPath();
        try (InputStream in = Files.newInputStream(file);
            BufferedReader reader =
              new BufferedReader(new InputStreamReader(in))) {
                  @SuppressWarnings("UnusedAssignment")
            String line = null;
            int j = 16;
            for (int i = 0; (line = reader.readLine()) != null; i++) {
                for (Choice danceTypeBox : danceTypeBoxArray)
                {
                    danceTypeBox.addItem(line);
                }
                j++;
            }
        } catch (IOException x) {
            System.err.println(x);
        }
        
        loadFile = new File(loadFileName + "/" + loadFileName + "CastList.txt");
        String castList = "";
        java.util.List<String> castListInputArray = new ArrayList<>();
        
        file = loadFile.toPath();
        try (InputStream in = Files.newInputStream(file);
            BufferedReader reader =
              new BufferedReader(new InputStreamReader(in))) {
                  @SuppressWarnings("UnusedAssignment")
            String line = null;
            String lastName = null;
            for (int i = 0; (line = reader.readLine()) != null; i++) {
                castListInputArray.add(line);// + "\n");
                lastName = line;
            }
            if (castListInputArray.get(castListInputArray.size() - 1).equals(""))
            {
                castListInputArray.remove(castListInputArray.size() - 1);
            }
        } catch (IOException x) {
            System.err.println(x);
        }
        
        
        for (int i = 0; i < castListInputArray.size() - 2; i++)
        { 
            castList += castListInputArray.get(i) + "\n";   
        }
        castList += castListInputArray.get(castListInputArray.size() - 1);
        
        castListTxt.setText(castList);

        PopulateComboBoxes();

        beingLoaded = false;
        
        firstHalfTxt.setText(Integer.toString(numberOfPieces / 2));
        limitTxt.setText(Integer.toString(numberOfPieces / 4));

        String[] alist = castListTxt.getText().split("\\n");
        
        if (alist[alist.length - 1].equals(""))
        {
            String myCast = "";
            for (int i = 0; i < alist.length - 2; i++)
            {
                myCast += alist[i] + System.getProperty("line.separator");
            }
            castListTxt.setText(myCast);
        }
        
        pieceDisplayHeight = GetPieceDisplayHeight();
        
        panelContainer.setPreferredSize(new Dimension(850, pieceDisplayHeight));
    }
    
    @SuppressWarnings("CallToThreadDumpStack")
    public void saveFormClosing(String saveFileName)
    {  
        String filename = saveFileName;
        
        try {
            String content = "";

            for (java.awt.List aList : listBoxArray)
            {
                int amount = aList.getItemCount();
                String amount_s = Integer.toString(amount);

                content += "#" + amount_s + System.getProperty("line.separator");

                for (String castMember : aList.getItems())
                {
                    content += castMember + System.getProperty("line.separator");
                }
            }

            File file = new File(filename + "/" + filename + ".txt");
            File dir = new File(filename);
            // if file doesnt exists, then create it
            dir.mkdir();

            FileWriter fw = new FileWriter(file.getAbsoluteFile());
            BufferedWriter bw = new BufferedWriter(fw);
            bw.write(content);
            bw.close();

            content = "";

            for (TextField title : textBoxArray)
            {
                content += title.getText() + System.getProperty("line.separator");
            }

            file = new File(filename + "/" + filename + "Titles.txt");

            fw = new FileWriter(file.getAbsoluteFile());
            bw = new BufferedWriter(fw);
            bw.write(content);
            bw.close();

            content = "";

            for (String line : castListTxt.getText().split("\\n"))
            {
                content += line + System.getProperty("line.separator");
            }

            file = new File(filename + "/" + filename + "CastList.txt");

            fw = new FileWriter(file.getAbsoluteFile());
            bw = new BufferedWriter(fw);
            bw.write(content);
            bw.close();

            content = "";

            for (Choice danceType : danceTypeBoxArray)
            {
                content += danceType.getSelectedItem() + System.getProperty("line.separator");
            }

            file = new File(filename + "/" + filename + "DanceTypes.txt");

            fw = new FileWriter(file.getAbsoluteFile());
            bw = new BufferedWriter(fw);
            bw.write(content);
            bw.close();
            
            content = "";

            for (int i = 16; i < danceTypeBoxArray.get(0).getItemCount(); i++)
            {
                content += danceTypeBoxArray.get(0).getItem(i) + System.getProperty("line.separator");
            }

            file = new File(filename + "/" + filename + "DanceTypesExtras.txt");

            fw = new FileWriter(file.getAbsoluteFile());
            bw = new BufferedWriter(fw);
            bw.write(content);
            bw.close();

            java.util.List<String> sessions = new ArrayList<>();

            content = "";
            
            file = new File("sessions.txt");

            //check if the file exists
            if (!file.exists())
            {
                fw = new FileWriter(file.getAbsoluteFile());
                bw = new BufferedWriter(fw);
                bw.write(content);
                bw.close();
            }

            //read from the file and insert sessions into list
            Path session = file.toPath();
            try (InputStream in = Files.newInputStream(session);
                BufferedReader reader =
                  new BufferedReader(new InputStreamReader(in))) {
                      @SuppressWarnings("UnusedAssignment")
                String line = null;
                for (int i = 0; (line = reader.readLine()) != null; i++) {
                    sessions.add(line);
                }
            } catch (IOException x) {
                System.err.println(x);
            }

            sessions.add(filename);

            for (String item : sessions)
            {
                content += item + System.getProperty("line.separator");
            }

            //overwrite everything in the sessions file
            fw = new FileWriter(file.getAbsoluteFile());
            bw = new BufferedWriter(fw);
            bw.write(content);
            bw.close();

        } catch (IOException e) {
                e.printStackTrace();
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HatchUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HatchUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HatchUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HatchUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            
            @Override
            public void run() {
                hatchui = new HatchUI();
                hatchui.setVisible(true);
            }
            
        });
    }

    public void AddNewPiece()
    {
        // Create a new instance of the Button class.
        AddNewListBox();
        AddNewComboBox(listBoxArray);
        AddNewComboBox();
        AddNewTextBox();
      
        miniCount++;
        
        if (textBoxArray.size() % 6 == 0)
        {
            miniCount = 0;
            levelCount++;
        }
    }
    
    @SuppressWarnings("UnusedAssignment")
    private Choice AddNewComboBox(java.util.List<java.awt.List> associatedListBoxes)
    {
        final Choice newComboBox = new
            Choice();
        
        final java.util.List<java.awt.List> connectedListBoxes = associatedListBoxes;

        //add to the collection list
        comboBoxArray.add(newComboBox);
        panelContainer.add(newComboBox);
        
        newComboBox.setBounds(miniCount * 110 + 100, 45 + levelCount * 170 + 10, 95, 20);
        
        //newComboBox.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
        //newComboBox.AutoCompleteSource = AutoCompleteSource.ListItems;
              
        newComboBox.addItemListener(new ItemListener() {
            
            @Override
            public void itemStateChanged(ItemEvent e) {
                ComboBoxClickHandler(e, comboBoxArray.indexOf(newComboBox), connectedListBoxes);
            }
            
        });

        return newComboBox;
    }
    
    private void ComboBoxClickHandler(ItemEvent e, int index, java.util.List<java.awt.List> connectedListBoxes)
    {
        if (e.getStateChange() == ItemEvent.SELECTED)
        {
            if (!e.getItem().toString().equals(""))
            {
                boolean alreadySelected = HasCastMember(e.getItem().toString(), connectedListBoxes.get(index));
                if (e.getItem().toString() != null && !alreadySelected)
                {
                    connectedListBoxes.get(index).add(e.getItem().toString());
                }

                //if (alreadySelected)
                    //MessageBox.Show("You already have this cast member in the piece!", "Error!", MessageBoxButtons.OK);
            }
            
        }
        
    }
    
    private boolean HasCastMember(String castMember, java.awt.List whichList)
    {
        for (String item : whichList.getItems()) 
        {
            if (item.equals(castMember))
            {
                return true;
            }
        }
        
        return false;
        
    }
    
    @SuppressWarnings("UnusedAssignment")
    private Choice AddNewComboBox()
    {
        
        Choice newComboBox = new
            Choice();

        //add to the collection list
        danceTypeBoxArray.add(newComboBox);
        panelContainer.add(newComboBox);
        
        newComboBox.setBounds(miniCount * 110 + 100, 22 + levelCount * 170 + 10, 95, 20);
        //newComboBox.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
        //newComboBox.AutoCompleteSource = AutoCompleteSource.ListItems;
        
        AddDanceTypes(newComboBox);

        return newComboBox;
    }
    
    private void AddDanceTypes(Choice aComboBox)
    {
        for (String item : danceTypes)
        {
            aComboBox.add(item);
        }
    }
    
    @SuppressWarnings("UnusedAssignment")
    private TextField AddNewTextBox()
    {
        
        TextField newTextBox = new
            TextField();

        //add to the collection list
        textBoxArray.add(newTextBox);
        panelContainer.add(newTextBox);
        
        //add to the overall form controls
        newTextBox.setBounds(miniCount * 110 + 100, levelCount * 170 + 10, 95, 20);

        return newTextBox;
    }
    
    @SuppressWarnings("UnusedAssignment")
    private java.awt.List AddNewListBox()
    {
        
        final java.awt.List newListBox = new
                java.awt.List();

        //add to the overall form controls
        listBoxArray.add(newListBox);
        panelContainer.add(newListBox);
        
        newListBox.setBounds(miniCount * 110 + 100, 69 + levelCount * 170 + 10, 95, 95);

        newListBox.addKeyListener(new KeyListener() {
            
            @Override
            public void keyTyped(KeyEvent e) {}

            @Override
            public void keyReleased(KeyEvent e) {}

            @Override
            public void keyPressed(KeyEvent e) {
                ListBoxKeyDownHandler(e, newListBox);
            }
        });

        return newListBox;
    }
    
    public void ListBoxKeyDownHandler(KeyEvent e, java.awt.List currentListBox)
    {
        
        if (e.getKeyCode() == KeyEvent.VK_DELETE)
        {
            int index = currentListBox.getSelectedIndex();
            if (index == currentListBox.getItemCount() - 1)
            {
                index--;
            }

            currentListBox.remove(currentListBox.getSelectedItem());

            //if (currentListBox.getItemCount() != 0)
              //  currentListBox.setSelectedIndex = index;
        }
    }

    private void SwitchVisibility(String which)
    {
        switch (which)
        {
            case "startup":
            {
                resetBtn.setEnabled(false);

                maxSolutionsLbl.setEnabled(false);
                thresholdTxt.setEnabled(false);
                firstHalfLbl.setEnabled(false);
                firstHalfTxt.setEnabled(false);
                maxTypeLbl.setEnabled(false);
                limitTxt.setEnabled(false);
                orderingBtn.setEnabled(false);
                thresholdTxt.setEnabled(false);
                
                addDanceTypeBtn.setEnabled(false);
                saveSessionBtn.setEnabled(false);
                
                progressBar.setVisible(false);
                break;
            }
            case "created":
            case "loaded":
            {
                numPiecesLbl.setEnabled(false);
                //numPiecesLbl.setVisible(false);
                numPiecesTxt.setEnabled(false);
                //numPiecesTxt.setVisible(false);
                createBtn.setEnabled(false);
                //createBtn.setVisible(false);

                firstHalfLbl.setEnabled(true);
                maxTypeLbl.setEnabled(true);
                limitTxt.setEnabled(true);
                maxSolutionsLbl.setEnabled(true);
                thresholdTxt.setEnabled(true);

                firstHalfTxt.setEnabled(true);
                orderingBtn.setEnabled(true);

                loadSessionBtn.setEnabled(false);
                saveSessionBtn.setEnabled(true);
                break;
            }
            case "solutions":
            {
                //give room for solution pane
                jScrollPane1.setVisible(false);
                panelContainer.setVisible(false);
                //move the solution pane
                solutionPanel.setBounds(jScrollPane1.getX(), jScrollPane1.getY(), jScrollPane1.getWidth(), jScrollPane1.getHeight());
                solutionPanel.setVisible(true);
                solutionContainer.setPreferredSize(new Dimension(pieceNameWidth, pieceNameHeight));
                solutionContainer.setBounds(0,0,pieceNameWidth, pieceNameHeight);
                solutionContainer.setVisible(true);

                resetBtn.setEnabled(true);

                firstHalfLbl.setEnabled(false);
                maxTypeLbl.setEnabled(false);
                limitTxt.setEnabled(false);
                maxSolutionsLbl.setEnabled(false);
                thresholdTxt.setEnabled(false);

                firstHalfTxt.setEnabled(false);
                orderingBtn.setEnabled(false);
                break;
            }
            case "restart":
            {
                solutionPanel.setVisible(false);
                solutionContainer.setVisible(false);
                jScrollPane1.setVisible(true);
                panelContainer.setVisible(true);
                
                resetBtn.setEnabled(false);
                firstHalfLbl.setEnabled(true);
                maxTypeLbl.setEnabled(true);
                limitTxt.setEnabled(true);
                maxSolutionsLbl.setEnabled(true);
                thresholdTxt.setEnabled(true);

                firstHalfTxt.setEnabled(true);
                orderingBtn.setEnabled(true);
                break;
            }
        }
    }

    private void PopulateComboBoxes()
    {
        if (comboBoxArray.size() > 0)
        {
            if (castListTxt.getRows() > comboBoxArray.get(0).getItemCount() ||
                HasEmpty(comboBoxArray))
            {
                for (Choice comboList : comboBoxArray)
                {
                    //empty out the list of items
                    comboList.removeAll();
                    //add in the new list that was just created
                    for (String line : castListTxt.getText().split("\\n"))
                    {
                        comboList.add(line);
                    }
                }
            }
        }
    }
    
    private boolean HasEmpty(java.util.List<Choice> comboBoxes)
    {
        for (Choice list : comboBoxes)
        {
            if (list.getItemCount() == 0) 
            {
                return true;
            }     
        }

        return false;
    }

    private void OrderPieces()
    {
        jScrollPane1.setVisible(false);
        progressBar.setVisible(true);
        progressBar.setLocation(this.getWidth() / 2 - progressBar.getWidth(), this.getHeight() / 2);
        //initialize the resources
        
        FillUpArrays();
        FillUpPossibles();
        progressBar.setValue(10);
        //AI backtracking solution, modified to look for all solutions instead of just one
        BacktrackSearch();
        progressBar.setValue(95);
        //report the solutions found
        DisplaySolutions();
        
        progressBar.setVisible(false);

    }

    @SuppressWarnings("ManualArrayToCollectionCopy")
    private void FillUpArrays()
    {
        //for each cast list
        for (int i = 0; i < castListArray.size(); i++)
        {
            if (listBoxArray.get(i).getItemCount() > 0) //if the corresponding listbox has items
            {
                for (String castMember : listBoxArray.get(i).getItems())
                {//fill up the array with the cast members
                    castListArray.get(i).add(castMember);
                }
            }
        }
    }

    private void FillUpPossibles()
    {
        for (int i = 0; i < castListArray.size(); i++)
        {
            for (int j = 0; j < castListArray.size(); j++)
            {
                showOrderPosition.get(i).add(j);
            }
        }
    }

    //main backtrack function
    private boolean BacktrackSearch()
    {
        if (solutionList.size() >= listThreshold) 
        {
            return true;
        }

        if (solutionFull())
        {
            if (solutionAlreadyFound())
            {
                return true;
            }

            java.util.List<Integer> temp = new ArrayList<>();
            for (int item : showOrder)
            {
                temp.add(item);
            }
            addToSolutionList(temp);

            return true;
        }

        //insert the cast list that has the least amount of piece-possiblities but also 
        int nextPossible = 0;
        int insertedValue  = insertNextPossible(showOrder.size(), nextPossible);  

        while (insertedValue != -1)
        {

            //save the showOrderPosition into temp
            //save the showOrder into temp
            java.util.List<java.util.List<Integer>> tempShowOrderPosition = new ArrayList<>();
            java.util.List<Integer> tempShowOrder = new ArrayList<>();
            CopyShowOrderPosition(showOrderPosition, tempShowOrderPosition);
            CopyShowOrder(showOrder, tempShowOrder);

            boolean works = insertIntoShowOrder(insertedValue);

            if (works)
            {
                BacktrackSearch();
            }

            //else return back to previous state
            CopyShowOrderPosition(tempShowOrderPosition, showOrderPosition);
            CopyShowOrder(tempShowOrder, showOrder);

            nextPossible++;
            insertedValue = insertNextPossible(showOrder.size(), nextPossible);

        }

        return false;
    }

    private void DisplaySolutions()
    {
        pieceNameWidth = GetPieceResultsWidth();
        pieceNameHeight = GetPieceResultsHeight();
        
        SwitchVisibility("solutions");

        int level = 0;

        for (java.util.List<Integer> list : solutionList)
        {
            JTextField aOrder = new JTextField();
            String aSolution = "";

            for (int item : list)
            {
                if (list.indexOf(item) != list.size() - 1)
                {
                    aSolution += textBoxArray.get(item).getText() + ", ";
                }
                else
                {
                    aSolution += textBoxArray.get(item).getText();
                }
            }
            
            aOrder.setText(aSolution);

            solutionContainer.add(aOrder);
            aOrder.setBounds(0, 25 * level, solutionContainer.getWidth(), 20);

            level++;
        }
    }

    private boolean insertIntoShowOrder(int value)
    {

        showOrder.add(value);

        int index = showOrder.size();

        //make sure each half of the show doesn't have too many of the
        //same type of dance type (for now each half of the show may 
        //have no more than half being any type of dance
        if (CheckFirstHalf()) 
        {
            return false;
        }
        if (CheckSecondHalf()) 
        {
            return false;
        }

        //this is the forward checking for the backtracking algorithm
        for (int i = showOrder.size(); i < numberOfPieces; i++)
        {
            //if this insertion of a showOrder value results in only allowing one option when there are
            //at least 2 more show order values to be filled, then this is an incorrect option
            if (showOrderPosition.get(i).size() == 1 && showOrder.size() < numberOfPieces) 
            {
                return false;
            }
            
            if (showOrderPosition.get(i).indexOf(value) == -1)
            {
                continue;
            }
            
            showOrderPosition.get(i).remove(showOrderPosition.get(i).indexOf(value));

        }

        //remove the respective possible values that each show order position can have, now that insertion is possible
        if (index != numberOfPieces)   //as long as this isn't the last show piece
        {
            for (int i = 0; i < castListArray.size(); i++)
            {
                if ((i != index - 1) &&     //as long as we're not looking at the same show order position...
                    HasMatching(castListArray.get(i), castListArray.get(index - 1)) &&  //as long as there is a matching cast member in the next show order position
                    (i != intermission))   //as long as we're not at intermission
                {
                    if (showOrderPosition.get(index).indexOf(i) == -1)
                    {
                        continue;
                    }
                    //then you can remove that possible value from the show order position
                    showOrderPosition.get(index).remove(showOrderPosition.get(index).indexOf(i));  
                }
            }   
        }
        return true;
    }
    
    private boolean HasMatching(java.util.List<String> aCastList, java.util.List<String> bCastList)
    {
        for (String name : bCastList)
        {
            for (String secondName : aCastList)
            {
                if (name.equals(secondName) && !name.equals("NULL"))
                {
                    return true;
                }
            }
        }

        return false;
    }
    
    private boolean CheckFirstHalf()
    {
        int half = Integer.parseInt(limitTxt.getText());

        //check first half of show
        for (int i = 0; i < (showOrder.size() < intermission ? showOrder.size() : intermission); i++)
        {
            if (isTooMany(i, half)) 
            {
                return true;
            }
        }

        return false;
    }

    private boolean CheckSecondHalf()
    {
        if (showOrder.size() > intermission)
        {
            int half = Integer.parseInt(limitTxt.getText());

            for (int i = intermission; i < showOrder.size(); i++)
            {
                if (isTooMany(i, half)) 
                {
                    return true;
                }
            }
        }

        return false;
    }

    private boolean isTooMany(int index, int half)
    {
        for (String key : amountOfTypes.keySet())
        {
            if (key.equals(danceTypeBoxArray.get(showOrder.get(index)).getSelectedItem()))
            {
                int already = amountOfTypes.get(key);
                already++;
                amountOfTypes.put(key, already);
                if (amountOfTypes.get(key) == half)
                {
                    return true;
                }
            }
        }

        return false;
    }

    private int insertNextPossible(int position, int index)
    {
        //insert the cast list that has the least amount of cast posibilities
        if (position < showOrderPosition.size())
        {
            if (index < showOrderPosition.get(position).size())
            {
                return showOrderPosition.get(position).get(index);
            }
            else
            {
                return -1;
            }
        }
        else
        {
            return -1;
        }
    }

    private boolean solutionFull()
    {
        if (showOrder.size() == numberOfPieces) 
        {
            return true;
        }
        else 
        {
            return false;
        }
    }

    private void addToSolutionList(java.util.List<Integer> aShow)
    {
        int value = progressBar.getValue();
        int newValue = value + (80 / listThreshold);
        progressBar.setValue(newValue);
        solutionList.add(aShow);
    }

    private boolean solutionAlreadyFound()
    {
        if (solutionList.contains(showOrder)) 
        {
            return true;
        }
        else 
        {
            return false;
        }
    }

    private void CopyShowOrderPosition(java.util.List<java.util.List<Integer>> src, java.util.List<java.util.List<Integer>> dest)
    {
        for (int i = 0; i < src.size(); i++)
        {
            if (dest.size() > i) 
            {
                dest.get(i).clear();
            }
            else
            {
                java.util.List<Integer> temp = new ArrayList<>();
                dest.add(temp);
            }
            for (int item : src.get(i))
            {
                dest.get(i).add(item);
            }
        }
    }

    private void CopyShowOrder(java.util.List<Integer> src, java.util.List<Integer> dest)
    {
        if (dest.size() > 0) 
        {
            dest.clear();
        }
        for (int item : src)
        {
            dest.add(item);
        }
    }

    private void ClearControls()
    {
        //clear text array
        for (TextField text : textBoxArray)
        {
            this.remove(text);
        }
        //clear dance array
        for (Choice combo : danceTypeBoxArray)
        {
            this.remove(combo);
        }
        //clear cast selection array
        for (Choice combo : comboBoxArray)
        {
            this.remove(combo);
        }
        //clear cast list array
        for (java.awt.List list : listBoxArray)
        {
            this.remove(list);
        }

    }
    
    private void FillInDanceTypes()
    {
        danceTypes.add("Salsa");
        danceTypes.add("Swing");
        danceTypes.add("Cha-Cha");
        danceTypes.add("Waltz");
        danceTypes.add("Foxtrot");
        danceTypes.add("Tango");
        danceTypes.add("Hustle");
        danceTypes.add("Country");
        danceTypes.add("Modern");
        danceTypes.add("Jive");
        danceTypes.add("Blues");
        danceTypes.add("Samba");
        danceTypes.add("Rumba");
        danceTypes.add("Quickstep");
        danceTypes.add("Polka");
        danceTypes.add("Fusion");
    }
    
    int GetPieceDisplayHeight()
    {
        int offset = 25;
        int heightOfOne = 20 + 20 + 20 + 95 + offset;
        
        int numLevels = (int)Math.ceil((double)numberOfPieces / (double)6);
        
        return heightOfOne * numLevels;
    }
    
    int GetPieceResultsHeight()
    {
        int offset = 25;
        return listThreshold * 20 + offset;
    }
    
    int GetPieceResultsWidth()
    {
        Font font = new Font("Tahoma", Font.PLAIN, 11);
        BufferedImage img = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB);
        FontMetrics fm = img.getGraphics().getFontMetrics(font);
        
        int pieceLengthSum = 0;
        for (TextField text : textBoxArray)
        {
            String pieceName = text.getText();
            
            pieceLengthSum += fm.stringWidth(pieceName);
        }
        
        int commaLengths = fm.stringWidth(", ") * numberOfPieces;
        
        return pieceLengthSum + commaLengths + 25;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutBtn;
    private javax.swing.JMenuItem addDanceTypeBtn;
    private javax.swing.JLabel castListDirLbl;
    private javax.swing.JLabel castListLbl;
    private javax.swing.JLabel castListTitlelbl;
    private javax.swing.JTextArea castListTxt;
    private javax.swing.JLabel castMembersLbl;
    private javax.swing.JButton createBtn;
    private javax.swing.JLabel danceTypeLbl;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel firstHalfLbl;
    private javax.swing.JTextField firstHalfTxt;
    private javax.swing.JMenuItem howToUseBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField limitTxt;
    private javax.swing.JMenuItem loadCastBtn;
    private javax.swing.JMenuItem loadSessionBtn;
    private javax.swing.JLabel maxSolutionsLbl;
    private javax.swing.JLabel maxTypeLbl;
    private javax.swing.JMenuBar menuStrip1;
    private javax.swing.JLabel numPiecesLbl;
    public javax.swing.JTextField numPiecesTxt;
    private javax.swing.JButton orderingBtn;
    private javax.swing.JPanel panelContainer;
    private javax.swing.JLabel pieceNameLbl;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JMenuItem quitBtn;
    private javax.swing.JButton resetBtn;
    private javax.swing.JMenuItem restartBtn;
    private javax.swing.JMenuItem saveSessionBtn;
    private javax.swing.JPanel solutionContainer;
    private javax.swing.JScrollPane solutionPanel;
    private javax.swing.JTextField thresholdTxt;
    // End of variables declaration//GEN-END:variables
}

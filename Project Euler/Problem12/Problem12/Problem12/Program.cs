using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Problem12
{
    class Program
    {
        /*
         * The sequence of triangle numbers is generated by adding the natural numbers. 
         * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
         *   1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
         * 
         *   Let us list the factors of the first seven triangle numbers:
         *
         *   1: 1
         *   3: 1,3
         *   6: 1,2,3,6
         *   10: 1,2,5,10
         *   15: 1,3,5,15
         *   21: 1,3,7,21
         *   28: 1,2,4,7,14,28
         *   We can see that 28 is the first triangle number to have over five divisors.
         *
         *   What is the value of the first triangle number to have over five hundred divisors?
         */

        static void Main(string[] args)
        {
            //start with 1 to test
            long testNumber = 1;
            
            //this accounts for each level of the triangle number sequence, just increment and add one to get the next item
            long countTest = 1;
            
            //keep track of the number of factors, test against numberOfTargetFactors for our goal
            long numberOfFactors = 1;
            long numberOfTargetFactors = 500;

            //this really keeps track of the largest number of divisors we've found of a triangle number so far
            long factorsAtSoFar = 0;

            do
            {

                //testNumber = GetNewNumber(countTest);  //use this to test specific numbers and change 'countTest' in the declarations
                testNumber += countTest + 1;

                if (((testNumber / 2) + 1) > numberOfTargetFactors)
                {

                    //test for divisors
                    for (long i = 1; i < Math.Round(Math.Sqrt(testNumber)); i++)
                    {
                        if ((testNumber % i) == 0)
                        {
                            numberOfFactors++;
                        }
                    }
                    
                    if (numberOfFactors > numberOfTargetFactors)
                    {
                        break;   //found it, so stop
                    }
                    else
                    {
                        //if we get more than we previously found, store it and write it in
                        if (numberOfFactors >= factorsAtSoFar)
                        {
                            factorsAtSoFar = numberOfFactors;
                            Console.WriteLine(testNumber + " : " + factorsAtSoFar);
                        }
                        
                        numberOfFactors = 1;   //didn't find it, so reset at 1
                    }

                }

                //increase the counter
                countTest++;

                //keep going while we haven't found the number of wanted factors, here we want 500
            } while (numberOfFactors < numberOfTargetFactors);


            Console.WriteLine("Answer: " + testNumber);
            Console.Read();

            

        }

        static long GetNewNumber(long count)
        {
            long newNumber = 0;
            for (long i = newNumber; i < count; i++)
            {
                newNumber += i;
            }

            return newNumber;
        }
            
    }
}

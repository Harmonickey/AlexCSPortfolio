using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Problem2
{
    /*
     * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
     * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
     * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
     */

    /* 
     * This program does an unconventional way of calculating fibonacci numbers and adding evens to a list.
     * Also, I added a recusion part that is more conventional to calculate fibo numbers.
     */
    class Program
    {
        const long threshold = 4000000;
        static List<long> evenNumbers = new List<long>();
        static void Main(string[] args)
        {
            //a better way is just to keep a running sum, no need to add them to a list...

            long currentNumber = 1;
            long previousNumber = 0;
            long fiboNumber;
            
            do
            {

                fiboNumber = currentNumber + previousNumber;

                if ((fiboNumber % 2) == 0)
                {
                    if (fiboNumber < threshold)
                        evenNumbers.Add(fiboNumber);  //here we would just add to the running sum instead of having a list
                }

                previousNumber = currentNumber;
                currentNumber = fiboNumber;


            } while (fiboNumber < threshold);

            Console.WriteLine("Unconventional Way \n");
            Console.WriteLine(evenNumbers.Sum());
            Console.Read();

            evenNumbers.Clear();

            currentNumber = 1;
            previousNumber = 0;

            FiboNumber(currentNumber, previousNumber);

            Console.WriteLine("Conventional Way, Recursion \n");
            Console.WriteLine(evenNumbers.Sum());
            Console.Read();
            Console.Read();
        }

        static void FiboNumber(long curr, long prev)
        {
            long fiboNumber = curr + prev;  //add the numbers to get the next one
            if (fiboNumber >= threshold) return; //will stop the loop
            else
            {
                if ((fiboNumber % 2) == 0)
                {
                    if (fiboNumber < threshold)
                        evenNumbers.Add(fiboNumber);  //if our fibonacci number is even, add it to the global list
                }
                FiboNumber(fiboNumber, curr); //the new one becomes the current and the old one becomes the previous
            }
            return; //make sure we exit each stack frame
        }
    }
}
